life/lifealg/Makefile.in~:	PreconditionerHypre.lo
life/lifealg/Makefile.in~:liblifealg_la_SOURCES = LinearEpetraOperatorBlock.cpp PreconditionerAztecOO.cpp Preconditioner.cpp PreconditionerML.cpp PreconditionerIfpack.cpp SolverAmesos.cpp SolverAztecOO.cpp PreconditionerHypre.cpp

life/lifealg/PreconditionerHypre.cpp:    @brief Hypre preconditioner
life/lifealg/PreconditionerHypre.cpp:#include "PreconditionerHypre.hpp"
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::PreconditionerHypre():
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::~PreconditionerHypre()
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::buildPreconditioner( operator_type& matrix )
life/lifealg/PreconditionerHypre.cpp:    M_precType += "_Hypre";
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::resetPreconditioner()
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::createParametersList( list_Type&         list,
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::createIfpackList( list_Type&         list,
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::ApplyInverse( const Epetra_MultiVector& vector1, Epetra_MultiVector& vector2 ) const
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::Apply( const Epetra_MultiVector& vector1, Epetra_MultiVector& vector2 ) const
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::showMe( std::ostream& output ) const
life/lifealg/PreconditionerHypre.cpp:    output << "showMe must be implemented for the PreconditionerHypre class" << std::endl;
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::setDataFromGetPot( const GetPot&      dataFile,
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::SetUseTranspose( bool useTranspose )
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::isPreconditionerSet() const
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::condest()
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::preconditioner()
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::super::prec_type
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::preconditionerPtr()
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::preconditionerType()
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::getOverlapLevel() const
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::UseTranspose()
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::OperatorRangeMap() const
life/lifealg/PreconditionerHypre.cpp:PreconditionerHypre::OperatorDomainMap() const

life/lifealg/PreconditionerHypre.hpp:    @brief Hypre Ifpack preconditioner
life/lifealg/PreconditionerHypre.hpp://! PreconditionerHypre - Class implementing Hypre library preconditioner through Ifpack
life/lifealg/PreconditionerHypre.hpp:class PreconditionerHypre:
life/lifealg/PreconditionerHypre.hpp:    PreconditionerHypre();
life/lifealg/PreconditionerHypre.hpp:    ~PreconditionerHypre();
life/lifealg/PreconditionerHypre.hpp:inline Preconditioner* createHypre() { return new PreconditionerHypre(); }
life/lifealg/PreconditionerHypre.hpp:static bool registerHY = PRECFactory::instance().registerProduct( "Hypre", &createHypre );

life/lifealg/Makefile.am:liblifealg_la_SOURCES	= LinearEpetraOperatorBlock.cpp PreconditionerAztecOO.cpp Preconditioner.cpp PreconditionerML.cpp PreconditionerHypre.cpp PreconditionerIfpack.cpp SolverAmesos.cpp SolverAztecOO.cpp

life/lifealg/Makefile.in:	PreconditionerHypre.lo PreconditionerIfpack.lo SolverAmesos.lo \
life/lifealg/Makefile.in:liblifealg_la_SOURCES = LinearEpetraOperatorBlock.cpp PreconditionerAztecOO.cpp Preconditioner.cpp PreconditionerML.cpp PreconditionerHypre.cpp PreconditionerIfpack.cpp SolverAmesos.cpp SolverAztecOO.cpp
life/lifealg/Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/PreconditionerHypre.Plo@am__quote@

Makefile.headers:LIFEALG_HDRS=life/lifealg/NonLinearAitken.hpp life/lifealg/PreconditionerIfpack.hpp life/lifealg/LinearEpetraOperator.hpp life/lifealg/PreconditionerML.hpp life/lifealg/SolverAmesos.hpp life/lifealg/NonLinearBrent.hpp life/lifealg/SolverAztecOO.hpp life/lifealg/PreconditionerAztecOO.hpp life/lifealg/Preconditioner.hpp life/lifealg/LinearEpetraOperatorBlock.hpp life/lifealg/NonLinearLineSearch.hpp life/lifealg/NonLinearRichardson.hpp life/lifealg/PreconditionerHypre.hpp 

Makefile.in:LIFEALG_HDRS = life/lifealg/NonLinearAitken.hpp life/lifealg/PreconditionerIfpack.hpp  life/lifealg/PreconditionerHypre.hpp life/lifealg/LinearEpetraOperator.hpp life/lifealg/PreconditionerML.hpp life/lifealg/SolverAmesos.hpp life/lifealg/NonLinearBrent.hpp life/lifealg/SolverAztecOO.hpp life/lifealg/PreconditionerAztecOO.hpp life/lifealg/Preconditioner.hpp life/lifealg/LinearEpetraOperatorBlock.hpp life/lifealg/NonLinearLineSearch.hpp life/lifealg/NonLinearRichardson.hpp life/lifealg/PreconditionerHypre.hpp

Makefile.in~:LIFEALG_HDRS = life/lifealg/NonLinearAitken.hpp life/lifealg/PreconditionerIfpack.hpp life/lifealg/LinearEpetraOperator.hpp life/lifealg/PreconditionerML.hpp life/lifealg/SolverAmesos.hpp life/lifealg/NonLinearBrent.hpp life/lifealg/SolverAztecOO.hpp life/lifealg/PreconditionerAztecOO.hpp life/lifealg/Preconditioner.hpp life/lifealg/LinearEpetraOperatorBlock.hpp life/lifealg/NonLinearLineSearch.hpp life/lifealg/NonLinearRichardson.hpp life/lifealg/PreconditionerHypre.hpp 

testsuite/test_darcy/data:    # ML, Ifpack, Hypre
testsuite/test_darcy/data:    prectype                = Hypre
