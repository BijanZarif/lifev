# -*- getpot -*- (GetPot mode activation for emacs)
#-------------------------------------------------
#      Data file for CE FSI Solver
#-------------------------------------------------

[problem]

method     = monolithic # monolithic, fullMonolithic
precond    = 0 #for Steklov-Poincare:
               #     0 = lin fluid, 1 lin structure, 2 = both, 3 = DD-Newton
               #for Monolithic:
               #     0: full matrix passed to IFPACK, 1: block-diagonal passed to IFPACK
DDNprecond = 1 # precond for DD-newton, 0 = lin fluid, 1 lin structure, 2 = both

reducedFluid = 0 # 0 = exact, 1 = inexact
defOmega   = 0.01 # usually 0.01 for precond = 0 or 1; -1 for precond = 2
defOmegaS  = 0.01 # matters only with  precond = 2
defOmegaF  = 0.01 # matters only with  precond = 2
# only for fixed point and exactJacobian:
# if updateEvery == 1, normal fixedPoint algorithm
# if updateEvery  > 1, recompute computational domain every M_updateEvery iterations (transpiration)
# if updateEvery <= 0, recompute computational domain and matrices only at first subiteration (semi-implicit).
#                        Deprecated when using exactJacobian (better to set ifSemiImplicit=1)
updateEvery = 1
linesearch = 0
# NonLinearRichardson: stop_tol  = abstol + reltol*normRes;
abstol     =  0. # tolerance in nonLinearRichardson
reltol     =  1.e-5 # tolerance in nonLinearRichardson

restart    = 0
maxSubIter = 20

[exporter]
multimesh  = false   # actually we export also the displacement
start      = 0
save       = 1
type       = hdf5
nRestart   = 0
[./fluid]
filename   = fluid
[../solid]
filename   = solid
[../]

[importer]
type       = hdf5
[./fluid]
filename   = fluid
[../solid]
filename   = solid
[../]

[fluid]
useShapeDerivatives           = false
domainVelImplicit             = false  # tells if the domain vel is to be considered implicitly in the convective term
convectiveTermDer             = false  # tells if the velocity is to be considered implicitly in the convective term
semiImplicit                  = true # tells if we advance in time after the first nonlinear iteration or not

[./physics]
density   = 1.0               # density
viscosity = 0.03              # viscosity

[../time_discretization]
initialtime		= 0.
endtime			= 0.01
timestep		= 0.001
BDF_order		= 1

[../space_discretization]
mesh_dir  = ./Mesh/
mesh_file = tube20.mesh
vel_order       = P1            # P1, P1Bubble, P2
press_order     = P1            # P1, P2

[../miscellaneous]
verbose   = 1
velname   = vel
pressname = press
steady    = 0
factor    = 1

[../ipstab]
gammaBeta  = 1
gammaDiv   = 0.2
gammaPress = 0.05
reuse = true


[interface] # mesh dependent flags for the interface.
DDBlockPrec = 7
#0: monolithic D-N system,
#1: segregated D-N , works only in the semiImplicit case
#2: monolithic  R-N system (equivalent to 0)
#3: segregated R-N (not working well)
#4: segregated R-N (not working well)
#5: AztecOO preconditioner (or direct parallel solver, in the future updates)
#6: Preconditioner J_QN (block G-S) for the Newton system. It works only with fullMonolithic.
#7: Preconditioner for the Monolithic case (not fullMonolithic): modular block G-S + A.S.
#8: Preconditioner for the Monolithic case (not fullMonolithic): modular block G-S + A.S.
#9: Preconditioner for the fullMonolithic (not Monolithic): modular blockG-S, is like case 6 but modular
#10: Preconditioner for the fullMonolithic (not Monolithic): modular blockG-S, is like case 6 but modular
#11: Preconditioner for the fullMonolithic (not Monolithic): modular blockG-S, split into 3 factors
#12: Preconditioner for the fullMonolithic (not Monolithic): modular blockG-S, split into 3 factors
#13: Preconditioner for the Monolithic case (not fullMonolithic): sum of 2 modular block G-S + A.S preconditioners.
#14: Preconditioner for the Monolithic case (not fullMonolithic): sum of 2 modular block G-S + A.S preconditioners.

fluid_flag      =  1 # default: 1
alphaf = 0.
alphas = 0.1 # parameters for Robin-Robin DDBlock preconditioner
fluid_flag      =  1 # default: 1
tolerance       =  0 # how far points are to be considered the same on the interface

[solid]

[./physics]
density   = 1.2               # density
young     = 3.0E6
poisson   = 0.30

[../time_discretization]
initialtime		= 0.000
endtime			= 0.01
timestep		= 0.001

[../space_discretization]
mesh_dir  = ./Mesh/ #test_tubes/  # the directory where the mesh file is
mesh_file = vessel20.mesh  # mesh file
order     = P1


[../miscellaneous]
factor    = 12
verbose   = 1
depname   = dep


[../newton]
maxiter = 1
abstol  = 1.e-8
linesearch = 0


[../solver]
output          = all # none
max_iter        = 200
poly_ord        = 5
kspace          = 200
precond         = dom_decomp
drop            = 1.00e-4
ilut_fill       = 2
tol             = 1.e-6


[./aztecoo]
reordering         = 1 # rcm
precond            = dom_decomp
subdomain_solve    = ilut
ilut_fill          = 4.e+0
drop               = 1.e-5
athresh            = 1.e-3
rthresh            = 1.e-3
reuse              = 1
displayList        = false

[../]

[../prec]
reuse           = false
prectype        = Ifpack
rescale_factor = 1. # solid matrix rescale factor
displayList     = false
entry           = 0.

[./ifpack] # if Ifpack
prectype        = Amesos
overlap         = 2


[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../partitioner]
overlap = 2

[../schwarz]
reordering_type = none #metis, rcm, none
flter_singletons = true

[../]

[../ML] #if ML
default_parameter_list = DD    # for ML precond, SA, DD, DD-ML, maxwell, NSSA, DD-ML-LU, DD-LU
prec_type = two-level-additive
displayList		= false

[./smoother]
type = IFPACK

[../] # end if ML

# end of preconditioner part

[mesh_motion]

[./solver]
output          = all # none
max_iter        = 200
poly_ord        = 5
kspace          = 40
precond         = dom_decomp
drop            = 1.00e-4
ilut_fill       = 4
tol             = 1.e-10
keep_info       = 1

[../prec]
prectype        = Ifpack
rescale_factor  = 1.e-2 # solid matrix rescale factor
displayList     = false

[./ifpack]
prectype        = Amesos
overlap         = 4

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[jacobian]

solver   = gmres;
poly_ord = 5;
kspace   = 40;
conv     = rhs;

[eigensolver]

nevec = 10
block_size = 1;
max_blocks = 1000;
max_restarts = 1000;
tol = 1e-5;
which = ML
neval = 5
