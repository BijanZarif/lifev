# -*- mode: m4 -*-
#
#  This file is part of the LifeV library
#
#  Author(s): Paolo Crosetto <crosetto@iacspc70.epfl.ch>
#       Date: 2009-11-10
#
#  Copyright (C) 2009 EPFL, INRIA, Politecnico di Milano
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# \file testsuiteGCE.at
# \author Paolo Crosetto <crosetto@iacspc70.epfl.ch>
# \date 2009-11-10
#
AT_SETUP([test_monolithic])
AT_KEYWORDS([ns fluid solid fsi])
AT_DATA([data],[[# -*- getpot -*- (GetPot mode activation for emacs)
#-------------------------------------------------
#      Data file for CE FSI Solver
#-------------------------------------------------

[problem]

blockOper   = AdditiveSchwarz
# OPTIONS:
#AdditiveSchwarz
#AdditiveSchwarzRN
#AdditiveSchwarzGI
#AdditiveSchwarzRNGI

DDBlockPrec = ComposedDN
# OPTIONS:
#AdditiveSchwarz: monolithic A-S preconditioner,
#AdditiveSchwarzGI: monolithic A-S preconditioner,
#ComposedDN: modular Dirichlet-Neumann preconditioner
#ComposedDN2: modular Dirichlet-Neumann preconditioner
#ComposedNN: modular Neumann-Neumann + Dirichlet-Dirichlet preconditioner
#ComposedDNND: modular Dirichlet-Neumann + Neumann-Dirichlet preconditioner
#ComposedDNGI: modular preconditioner for the geometric implicit, split in 3 factor
#ComposedDN2GI: modular preconditioner for the geometric implicit, split in 3 factor
#ComposedDNDGI: under testing, do not use
#ComposedDN2DGI: under testing, do not use

method     = monolithicGE # monolithicGE, monolithicGI

reducedFluid = 0 # 0 = exact, 1 = inexact
defOmega   = 0.01 # usually 0.01 for precond = 0 or 1; -1 for precond = 2
defOmegaS  = 0.01 # matters only with  precond = 2
defOmegaF  = 0.01 # matters only with  precond = 2
# only for fixed point and exactJacobian:
# if updateEvery == 1, normal fixedPoint algorithm
# if updateEvery  > 1, recompute computational domain every M_updateEvery iterations (transpiration)
# if updateEvery <= 0, recompute computational domain and matrices only at first subiteration (semi-implicit).
#                        Deprecated when using exactJacobian (better to set ifSemiImplicit=1)
updateEvery = 1
linesearch = 0
# NonLinearRichardson: stop_tol  = abstol + reltol*normRes;
abstol     =  0. # tolerance in nonLinearRichardson
reltol     =  1.e-5 # tolerance in nonLinearRichardson

restart    = 0
maxSubIter = 20
fluidMeshPartitioned = none
solidMeshPartitioned = none

[exporter]
multimesh  = false   # actually we export also the displacement
start      = 0
save       = 1
type       = hdf5
nRestart   = 0

[./fluid]
filename   = fluid
[../solid]
filename   = solid
[../] # solid
[../] # exporter

[importer]
type       = hdf5
[./fluid]
filename   = fluid
[../solid]
filename   = solid
[../] # solid
# [../] # importer

[fluid]
useShapeDerivatives           = false
semiImplicit                  = true # tells if we advance in time after the first nonlinear iteration or not
domainVelImplicit             = false  # tells if the domain vel is to be considered implicitly in the convective term
convectiveTermDer             = false  # tells if the velocity is to be considered implicitly in the convective term

[./physics]
density   = 1.0               # density
viscosity = 0.03              # viscosity

[../time_discretization]
initialtime		= 0.
endtime			= 0.004
timestep		= 0.001
BDF_order		= 1

[../space_discretization]
mesh_dir  = ./
mesh_file = tube20.mesh
vel_order       = P1            # P1, P1Bubble, P2
press_order     = P1            # P1, P2
stiff_strain    = false

[../miscellaneous]
verbose   = 1
velname   = vel
pressname = press
steady    = 0
factor    = 1

[../ipstab]
gammaBeta  = 1
gammaDiv   = 0.2
gammaPress = 0.05
reuse = true
[../] # physics
[../] # fluid

[interface]
fluid_flag      =  1 # default: 1
tolerance       =  0 # how far points are to be considered the same on the interface
[../] # interface

[solid]

useExactJacobian = false # always false for linear structure model. Otherwise it allows to chose beween an exact-inexact
                         # Newton scheme

[./physics]

solidType = linearVenantKirchhof
# either linearVenantKirchhof or nonLinearVenantKirchhof (the last one still in development)
material_flag = 1
# volume flag of the solid mesh
density   = 1.2               # density
young     = 3.0E6
poisson   = 0.30

[../time_discretization]
initialtime		= 0.
endtime			= 0.004
timestep		= 0.001
BDF_order		= 1

[../space_discretization]
mesh_dir  = ./ #test_tubes/  # the directory where the mesh file is
mesh_file = vessel20.mesh  # mesh file
order     = P1


[../miscellaneous]
factor    = 12
verbose   = 1
depname   = dep


[../newton]
maxiter = 1
abstol  = 1.e-8
linesearch = 0



[linear_system]

[./solver]
output          = all # none
max_iter        = 200
poly_ord        = 5
kspace          = 200
precond         = dom_decomp
drop            = 1.00e-4
ilut_fill       = 2
tol             = 1.e-6


[./aztecoo]
reordering         = 1 # rcm
precond            = dom_decomp
subdomain_solve    = ilut
ilut_fill          = 4.e+0
drop               = 1.e-5
athresh            = 1.e-3
rthresh            = 1.e-3
reuse              = 1
displayList        = false

[../] # aztecoo

[../prec]
reuse           = false
prectype        = Ifpack
rescale_factor = 1. # solid matrix rescale factor
displayList     = false
entry           = 0.

[./robin]
alphaf = 0.
alphas = 0.5 # parameters for Robin-Robin DDBlock preconditioner


[../ifpack] # if Ifpack
prectype        = Amesos
overlap         = 2

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../partitioner]
overlap = 2

[../schwarz]
reordering_type = none #metis, rcm, none
flter_singletons = true

[../] # ifpack

[../ML] #if ML
default_parameter_list = DD    # for ML precond, SA, DD, DD-ML, maxwell, NSSA, DD-ML-LU, DD-LU
prec_type = two-level-additive
displayList		= false

[./smoother]
type = IFPACK

[../] # end if ML
[../] # prec
# end of preconditioner part

[mesh_motion]

[./solver]
output          = all # none
max_iter        = 200
poly_ord        = 5
kspace          = 40
precond         = dom_decomp
drop            = 1.00e-4
ilut_fill       = 4
tol             = 1.e-10
keep_info       = 1

[../prec]
prectype        = Ifpack
rescale_factor  = 1.e-2 # solid matrix rescale factor
displayList     = false

[./ifpack]
prectype        = Amesos
overlap         = 4

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../] # ifpack
[../] # prec

[jacobian]

solver   = gmres;
poly_ord = 5;
kspace   = 40;
conv     = rhs;

[eigensolver]

nevec = 10
block_size = 1;
max_blocks = 1000;
max_restarts = 1000;
tol = 1e-5;
which = ML
neval = 5

]])


AT_CHECK([ln -sf ../../data/mesh/inria/tube20.mesh &&
          ln -sf ../../data/mesh/inria/vessel20.mesh &&
          mpirun -np 2 ../../test_monolithic/test_monolithic],[0],[ignore],[ignore])
AT_CLEANUP([out_res_solid iter num_iter out_iter_solid res])
