# -*- mode: m4 -*-
#
#  This file is part of the LifeV library
#
#  Author(s): Christophe Prud'homme <christophe.prudhomme@epfl.ch>
#       Date: 2004-08-29
#
#  Copyright (C) 2004 EPFL, INRIA and Politecnico di Milano
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# \file testsuite.at
# \author Christophe Prud'homme <christophe.prudhomme@epfl.ch>
# \date 2004-08-29
#
AT_SETUP([test_heart])
AT_KEYWORDS([test_heart fluid])
AT_DATA([data],[[# -*- getpot -*- (GetPot mode activation for emacs)
#----------------------------------------------------------------
#      Data file for cylinder test with Navier-Stokes IP Solver
#----------------------------------------------------------------

[ensight]
multimesh  = false
save       = 5
post_dir = ./

[electric]

[./physics]

test_case   = 2                  # in particular for b.c. condition
ion_model = 2		# 1: RM 	2: LR

Chi		= 1e3 #originale: 1e3 		#cm^-1
Cm		= 1e-3 #funz:10 #originale: 1e-3 //con 1 e mesh vecchia non esplode		#mF/cm^2
#D       = 0.001 #LR=0.001 RM=0.05 #0.005 #0.001 è per luorudy; 0.05 #funz: 1e3 #originale: 1e-3// "   1e3	 "	#per il momento caso isotropo

#sigmal		= 1.2e-1 #1.2e-3 #1.2e-3 è per luorudy 1.2e-1  #0.2 #0.12 #1 #1.2e-1 #funz:1.2e3 #originale: 1.2e-3	#O^-1cm^-1
#sigmat		= 2.5562e-2 #2.5562e-4 # 2.5562e-4 è per luorudy 2.5562e-2 #0.01 #0.025 #1.2 #2.5562e-2 #funz:2.5e2 #originale: 2.5562e-4	#O^-1cm^-1

heart_diff_fct = 0

# case 0: normal diffusion,
# case 1: reduced diffusion in sphere region
# case 2: reduced diffusion in cyl region
# case 3: reduced diffusion in box region

stim_center_1 = '-0.137 0.64 -3.27'   
stim_radius_1 = 1.5 #0.8 #0.3 #1.5 #0.8
stim_start_1 = 0
stim_stop_1 = 1 #RM=3
stim_value_1 = 50 #LR=50 RM=100
stim_period_1 = 500 #350

#per reduced_sigma_sphere (heart_diff_fct=1)
sigma_reduction  = '0.1, 1.'
sphere_center = '0., 0., 0.'
sphere_radius = 0.5

#per reduced_sigma_box (heart_diff_fct=3)
#sigma_reduction  = '0.001, 1.'
#box_vertex_min = '0., 0., 0.'
#box_vertex_max = '1., 1., 1.'



endtime         = 0.4
density         = 1.0          # density
viscosity       = 0.005         # viscosity
init_data = 0
uinit = 0

[../discretization]
mesh_dir        = ./
mesh_file       = ellissoide29560.mesh 
mesh_type       = .mesh

mesh_faces      = all                   # update all faces elements
mesh_edges      = all                   # update all faces elements
timestep        = 0.1                	# timestep
verbose         = 1                     # verbose during mesh-reading

has_fibers = 1


order_bdf       = 1
linearized      = 0
diagonalize     = 0 # weight, 0=off

[../miscellaneous]
verbose         = 1


[../solver]
solver          = cg    #cg , gmres, cgs, tfqmr, bicgstab, slu, symmlq, fixed_pt, lu
scaling         = none
output          = all_res # all_res, warnings , none , all, all_res, last
conv            = rhs
max_iter        = 100
kspace          = 100
precond         = dom_decomp #none,jacobi,sym_gs,neumann,ls,smoother,dom_decomp
subdomain_solve = icc #ilu, ilut
overlap         = 1
ilut_fill       = 2
graph_fill      = 0
drop            = 1.e-4
tol             = 1.00e-5 
keep_info       = 1

[../prec]

reuse           = true
overlap         = 1
droptol         = 1.e-5
fill 		= 1



]])


AT_CHECK([ln -sf ../../data/mesh/inria/ellissoide29560.mesh  &&
          mpirun -np 2 ../../test_heart/test_heart -c],[0],[ignore],[ignore])
AT_CLEANUP([out_res_solid iter num_iter out_iter_solid res])

